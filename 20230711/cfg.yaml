!ignore dynamic_host:
  - &node_id front_envoy_000_002
  - &node_cluster front_envoy_000
  - &lbs_m_serv_1 7.26.7.121
  - &lbs_m_serv_2 7.26.7.121
  - &lbs_m_serv_3 7.26.7.121
  - &lbs_s_serv_1 7.26.7.122
  - &lbs_s_serv_2 7.26.7.122
  - &lbs_s_serv_3 7.26.7.122
  - &lbs_m_port_1 7.26.7.121
  - &lbs_m_port_2 7.26.7.121
  - &lbs_m_port_3 7.26.7.121
  - &lbs_s_port_1 7.26.7.122
  - &lbs_s_port_2 7.26.7.122
  - &lbs_s_port_3 7.26.7.122
  - &dc_route_mode_0_cluster_comm aggregate_cluster_m_comm
  - &dc_route_mode_0_cluster_read aggregate_cluster_m_read
  - &uds_pipe_path /tmp/123.socket
  - &loc_server_port 8802
  - &loc_admin_port 9902
  - &healthy_percentages 5
  - &health_check_interval 4s
  - &overprovisioning_factor 334
  - &duration_filter_threshold 5000
  - &runtime_filter_percent 0
  - &request_timeout_001 25s
  - &request_timeout_offset_001 0.5s
  - &request_timeout_002 130s
  - &request_timeout_offset_002 1s
layered_runtime:
  layers:
    - name: static_layer
      static_layer:
        envoy.reloadable_features.successful_active_health_check_uneject_host: true
node:
  id: *node_id
  cluster: *node_cluster
admin:
  address: { socket_address: { address: 0.0.0.0, port_value: *loc_admin_port } }
  access_log:
    - name: envoy.access_loggers.file
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
        path: ${log.basedir}/admin_access.log
cluster_manager:
  outlier_detection:
    event_log_path: ${log.basedir}/outlier_detection.log
static_resources:
  listeners:
    - name: listener_0
      address: { socket_address: { address: 0.0.0.0, port_value: *loc_server_port } }
      additional_addresses: [ { address: { pipe: { path: *uds_pipe_path, mode: 511 } }, socket_options: { } } ]
      filter_chains:
        - filters:
            - name: envoy.filters.network.connection_limit
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.connection_limit.v3.ConnectionLimit
                stat_prefix: connection_limit
                max_connections: 100
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.file
                    filter:
                      or_filter:
                        filters:
                          - status_code_filter: { comparison: { op: LE, value: { default_value: 199, runtime_key: access_log_status_code_filter_le_threshold } } }
                          - status_code_filter: { comparison: { op: GE, value: { default_value: 201, runtime_key: access_log_status_code_filter_ge_threshold } } }
                          - grpc_status_filter: { statuses: [ 0 ], exclude: true }
                          - duration_filter: { comparison: { op: GE, value: { default_value: *duration_filter_threshold, runtime_key: access_log_duration_filter_threshold } } }
                          - runtime_filter: { runtime_key: access_log_runtime_filter_percent, percent_sampled: { numerator: *runtime_filter_percent, denominator: HUNDRED }, use_independent_randomness: false }
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: ${log.basedir}/access.log
                      log_format:
                        text_format_source:
                          inline_string: >
                            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                            %RESPONSE_CODE% %GRPC_STATUS_NUMBER% "%RESP(frwk-grpc-ext-status-code)%" %RESPONSE_FLAGS% %REQ(x-envoy-attempt-count)% %BYTES_RECEIVED% %BYTES_SENT% %DURATION%
                            %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%"
                            "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                            "%REQ(x-ap-group-id)%" %REQ(x-dc-route-mode)% %REQ(x-tlfc-flag)% "%REQ(x-sys-tx-code)%"
                            "%REQ(x-app-tx-code)%" %REQ(x-bank-code)% %REQ(x-read-flag)% %REQ(x-fast-flag)%
                            "%REQ(x-envoy-downstream-service-cluster)%" "%REQ(x-envoy-downstream-service-node)%" "%REQ(x-sccba-global-search-no)%" "%REQ(x-sccba-client-sys-no)%"
                codec_type: AUTO
                request_timeout: 30s
                request_headers_timeout: 10s
                use_remote_address: false
                skip_xff_append: true
                add_user_agent: true
                http2_protocol_options:
                  max_concurrent_streams: 100
                common_http_protocol_options:
                  idle_timeout: 3600s
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                scoped_routes:
                  name: scope_routes_01
                  scope_key_builder:
                    fragments:
                      - { header_value_extractor: { name: x-sys-tx-code, element_separator: "", index: 0 } }
                      - { header_value_extractor: { name: x-read-flag, element_separator: "", index: 0 } }
                  scoped_route_configurations_list:
                    scoped_route_configurations:
                      - name: scoped_route_001_comm
                        key:
                          fragments:
                            - string_key: "TCCB"
                            - string_key: "0"
                        route_configuration:
                          name: local_route
                          request_headers_to_add: [ { header: { key: x-tlfc-flag, value: "0" } } ]
                          virtual_hosts:
                            - name: local_service
                              domains: [ "*" ]
                              include_request_attempt_count: true
                              retry_policy:
                                retry_on: connect-failure
                                num_retries: 2
                                retry_host_predicate:
                                  - name: envoy.retry_host_predicates.previous_hosts
                                    typed_config:
                                      "@type": type.googleapis.com/envoy.extensions.retry.host.previous_hosts.v3.PreviousHostsPredicate
                                host_selection_retry_max_attempts: 3
                              routes:
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "0" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: *dc_route_mode_0_cluster_comm
                                    max_stream_duration:
                                      max_stream_duration: *request_timeout_001
                                      grpc_timeout_header_max: *request_timeout_001
                                      grpc_timeout_header_offset: *request_timeout_offset_001
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "1" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_m_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "2" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_s_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "3" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    weighted_clusters:
                                      clusters: [ { name: aggregate_cluster_m_comm, weight: 70 }, { name: aggregate_cluster_s_comm, weight: 30 } ]
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "4" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    weighted_clusters:
                                      clusters: [ { name: aggregate_cluster_m_comm, weight: 30 }, { name: aggregate_cluster_s_comm, weight: 70 } ]
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "5" } }
                                      - { name: x-fast-flag, string_match: { exact: "0" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_m_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "5" } }
                                      - { name: x-fast-flag, string_match: { exact: "1" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_s_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "6" } }
                                      - { name: x-fast-flag, string_match: { exact: "0" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_s_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "6" } }
                                      - { name: x-fast-flag, string_match: { exact: "1" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_m_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                      - name: scoped_route_001_read
                        key:
                          fragments:
                            - string_key: "TCCB"
                            - string_key: "1"
                        route_configuration:
                          name: local_route
                          request_headers_to_add: [ { header: { key: x-tlfc-flag, value: "0" } } ]
                          virtual_hosts:
                            - name: local_service
                              domains: [ "*" ]
                              include_request_attempt_count: true
                              retry_policy:
                                retry_on: connect-failure
                                num_retries: 5
                                retry_priority:
                                  name: envoy.retry_priorities.previous_priorities
                                  typed_config:
                                    "@type": type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig
                                    update_frequency: 2
                                retry_host_predicate:
                                  - name: envoy.retry_host_predicates.previous_hosts
                                    typed_config:
                                      "@type": type.googleapis.com/envoy.extensions.retry.host.previous_hosts.v3.PreviousHostsPredicate
                                host_selection_retry_max_attempts: 5
                              routes:
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "0" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: *dc_route_mode_0_cluster_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "1" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_m_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "2" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_s_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "3" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    weighted_clusters:
                                      clusters: [ { name: aggregate_cluster_m_read, weight: 70 }, { name: aggregate_cluster_s_read, weight: 30 } ]
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "4" } } ]
                                  route:
                                    timeout: *request_timeout_001
                                    weighted_clusters:
                                      clusters: [ { name: aggregate_cluster_m_read, weight: 30 }, { name: aggregate_cluster_s_read, weight: 70 } ]
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "5" } }
                                      - { name: x-fast-flag, string_match: { exact: "0" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_m_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "5" } }
                                      - { name: x-fast-flag, string_match: { exact: "1" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_s_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "6" } }
                                      - { name: x-fast-flag, string_match: { exact: "0" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_s_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                                - match:
                                    prefix: "/"
                                    headers:
                                      - { name: x-dc-route-mode, string_match: { exact: "6" } }
                                      - { name: x-fast-flag, string_match: { exact: "1" } }
                                  route:
                                    timeout: *request_timeout_001
                                    cluster: aggregate_cluster_m_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_001, grpc_timeout_header_max: *request_timeout_001, grpc_timeout_header_offset: *request_timeout_offset_001 }
                      - name: scoped_route_002_comm
                        key:
                          fragments:
                            - string_key: "TCCR"
                            - string_key: "0"
                        route_configuration:
                          name: local_route
                          request_headers_to_add: [ { header: { key: x-tlfc-flag, value: "0" } } ]
                          virtual_hosts:
                            - name: local_service
                              domains: [ "*" ]
                              include_request_attempt_count: true
                              retry_policy:
                                retry_on: connect-failure
                                num_retries: 5
                                retry_priority:
                                  name: envoy.retry_priorities.previous_priorities
                                  typed_config:
                                    "@type": type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig
                                    update_frequency: 2
                                retry_host_predicate:
                                  - name: envoy.retry_host_predicates.previous_hosts
                                    typed_config:
                                      "@type": type.googleapis.com/envoy.extensions.retry.host.previous_hosts.v3.PreviousHostsPredicate
                                host_selection_retry_max_attempts: 5
                              routes:
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "0" } } ]
                                  route:
                                    timeout: *request_timeout_002
                                    cluster: *dc_route_mode_0_cluster_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_002, grpc_timeout_header_max: *request_timeout_002, grpc_timeout_header_offset: *request_timeout_offset_002 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { safe_regex: { regex: "[135]" } } } ]
                                  route:
                                    timeout: *request_timeout_002
                                    cluster: aggregate_cluster_m_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_002, grpc_timeout_header_max: *request_timeout_002, grpc_timeout_header_offset: *request_timeout_offset_002 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { safe_regex: { regex: "[246]" } } } ]
                                  route:
                                    timeout: *request_timeout_002
                                    cluster: aggregate_cluster_s_comm
                                    max_stream_duration: { max_stream_duration: *request_timeout_002, grpc_timeout_header_max: *request_timeout_002, grpc_timeout_header_offset: *request_timeout_offset_002 }
                      - name: scoped_route_002_read
                        key:
                          fragments:
                            - string_key: "TCCR"
                            - string_key: "1"
                        route_configuration:
                          name: local_route
                          request_headers_to_add: [ { header: { key: x-tlfc-flag, value: "0" } } ]
                          virtual_hosts:
                            - name: local_service
                              domains: [ "*" ]
                              include_request_attempt_count: true
                              retry_policy:
                                retry_on: connect-failure
                                num_retries: 5
                                retry_priority:
                                  name: envoy.retry_priorities.previous_priorities
                                  typed_config:
                                    "@type": type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig
                                    update_frequency: 2
                                retry_host_predicate:
                                  - name: envoy.retry_host_predicates.previous_hosts
                                    typed_config:
                                      "@type": type.googleapis.com/envoy.extensions.retry.host.previous_hosts.v3.PreviousHostsPredicate
                                host_selection_retry_max_attempts: 5
                              routes:
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { exact: "0" } } ]
                                  route:
                                    timeout: *request_timeout_002
                                    cluster: *dc_route_mode_0_cluster_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_002, grpc_timeout_header_max: *request_timeout_002, grpc_timeout_header_offset: *request_timeout_offset_002 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { safe_regex: { regex: "[135]" } } } ]
                                  route:
                                    timeout: *request_timeout_002
                                    cluster: aggregate_cluster_m_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_002, grpc_timeout_header_max: *request_timeout_002, grpc_timeout_header_offset: *request_timeout_offset_002 }
                                - match:
                                    prefix: "/"
                                    headers: [ { name: x-dc-route-mode, string_match: { safe_regex: { regex: "[246]" } } } ]
                                  route:
                                    timeout: *request_timeout_002
                                    cluster: aggregate_cluster_s_read
                                    max_stream_duration: { max_stream_duration: *request_timeout_002, grpc_timeout_header_max: *request_timeout_002, grpc_timeout_header_offset: *request_timeout_offset_002 }
  clusters:
    - name: aggregate_cluster_m_comm
      lb_policy: CLUSTER_PROVIDED
      cluster_type:
        name: envoy.clusters.aggregate
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig
          clusters:
            - lbs_cluster_m_comm
            - lbs_cluster_s_comm
      circuit_breakers:
        thresholds:
          retry_budget:
            budget_percent: { value: 30 }
            min_retry_concurrency: 10
    - name: aggregate_cluster_m_read
      lb_policy: CLUSTER_PROVIDED
      cluster_type:
        name: envoy.clusters.aggregate
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig
          clusters:
            - lbs_cluster_m_read
            - lbs_cluster_s_read
      circuit_breakers:
        thresholds:
          retry_budget:
            budget_percent: { value: 30 }
            min_retry_concurrency: 100
    - name: aggregate_cluster_s_comm
      lb_policy: CLUSTER_PROVIDED
      cluster_type:
        name: envoy.clusters.aggregate
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig
          clusters:
            - lbs_cluster_s_comm
            - lbs_cluster_m_comm
      circuit_breakers:
        thresholds:
          retry_budget:
            budget_percent: { value: 30 }
            min_retry_concurrency: 100
    - name: aggregate_cluster_s_read
      lb_policy: CLUSTER_PROVIDED
      cluster_type:
        name: envoy.clusters.aggregate
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig
          clusters:
            - lbs_cluster_s_read
            - lbs_cluster_m_read
      circuit_breakers:
        thresholds:
          retry_budget:
            budget_percent: { value: 30 }
            min_retry_concurrency: 100
    - name: lbs_cluster_m_comm
      connect_timeout: 3s
      lb_policy: LEAST_REQUEST
      health_checks:
        - timeout: 1s
          interval: *health_check_interval
          unhealthy_threshold: 3
          healthy_threshold: 2
          no_traffic_interval: *health_check_interval
          reuse_connection: true
          http_health_check:
            host: *node_id
            path: '/http.health.check/comm'
          event_log_path: ${log.basedir}/health_check.log
          always_log_health_check_failures: true
      outlier_detection:
        split_external_local_origin_errors: true
        enforcing_consecutive_5xx: 0
        enforcing_consecutive_gateway_failure: 100
        enforcing_consecutive_local_origin_failure: 100
        enforcing_success_rate: 0
        enforcing_local_origin_success_rate: 0
        enforcing_failure_percentage: 0
        enforcing_failure_percentage_local_origin: 0
        consecutive_5xx: 700
        consecutive_gateway_failure: 500
        consecutive_local_origin_failure: 20
        base_ejection_time: 20s
        max_ejection_time: 40s
        max_ejection_percent: 70
        interval: 5s
      common_lb_config:
        healthy_panic_threshold: { value: 0 }
      load_assignment:
        cluster_name: service_backend
        policy: { overprovisioning_factor: *overprovisioning_factor }
        endpoints:
          - locality: { region: R001 }
            priority: 0
            lb_endpoints:
              - endpoint: { address: { socket_address: { address: *lbs_m_serv_1, port_value: *lbs_m_port_1 } } }
              - endpoint: { address: { socket_address: { address: *lbs_m_serv_2, port_value: *lbs_m_port_2 } } }
              - endpoint: { address: { socket_address: { address: *lbs_m_serv_3, port_value: *lbs_m_port_3 } } }
      circuit_breakers:
        thresholds:
          max_connections: 200
          max_requests: 3000
        per_host_thresholds:
          max_connections: 100
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              max_concurrent_streams: 100
          common_http_protocol_options:
            idle_timeout: 3600s
    - name: lbs_cluster_m_read
      connect_timeout: 3s
      lb_policy: LEAST_REQUEST
      health_checks:
        - timeout: 1s
          interval: *health_check_interval
          unhealthy_threshold: 3
          healthy_threshold: 2
          no_traffic_interval: *health_check_interval
          reuse_connection: true
          http_health_check:
            host: *node_id
            path: '/http.health.check/read'
          event_log_path: ${log.basedir}/health_check.log
          always_log_health_check_failures: true
      outlier_detection:
        split_external_local_origin_errors: true
        enforcing_consecutive_5xx: 0
        enforcing_consecutive_gateway_failure: 100
        enforcing_consecutive_local_origin_failure: 100
        enforcing_success_rate: 0
        enforcing_local_origin_success_rate: 0
        enforcing_failure_percentage: 0
        enforcing_failure_percentage_local_origin: 0
        consecutive_5xx: 700
        consecutive_gateway_failure: 500
        consecutive_local_origin_failure: 20
        base_ejection_time: 20s
        max_ejection_time: 40s
        max_ejection_percent: 70
        interval: 5s
      common_lb_config:
        healthy_panic_threshold: { value: 0 }
      load_assignment:
        cluster_name: service_backend
        policy: { overprovisioning_factor: *overprovisioning_factor }
        endpoints:
          - locality: { region: R001 }
            priority: 0
            lb_endpoints:
              - endpoint: { address: { socket_address: { address: *lbs_m_serv_1, port_value: *lbs_m_port_1 } } }
              - endpoint: { address: { socket_address: { address: *lbs_m_serv_2, port_value: *lbs_m_port_2 } } }
              - endpoint: { address: { socket_address: { address: *lbs_m_serv_3, port_value: *lbs_m_port_3 } } }
      circuit_breakers:
        thresholds:
          max_connections: 200
          max_requests: 3000
        per_host_thresholds:
          max_connections: 100
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              max_concurrent_streams: 100
          common_http_protocol_options:
            idle_timeout: 3600s
    - name: lbs_cluster_s_comm
      connect_timeout: 3s
      lb_policy: LEAST_REQUEST
      health_checks:
        - timeout: 1s
          interval: *health_check_interval
          unhealthy_threshold: 3
          healthy_threshold: 2
          no_traffic_interval: *health_check_interval
          reuse_connection: true
          http_health_check:
            host: *node_id
            path: '/http.health.check/comm'
          event_log_path: ${log.basedir}/health_check.log
          always_log_health_check_failures: true
      outlier_detection:
        split_external_local_origin_errors: true
        enforcing_consecutive_5xx: 0
        enforcing_consecutive_gateway_failure: 100
        enforcing_consecutive_local_origin_failure: 100
        enforcing_success_rate: 0
        enforcing_local_origin_success_rate: 0
        enforcing_failure_percentage: 0
        enforcing_failure_percentage_local_origin: 0
        consecutive_5xx: 700
        consecutive_gateway_failure: 500
        consecutive_local_origin_failure: 20
        base_ejection_time: 20s
        max_ejection_time: 40s
        max_ejection_percent: 70
        interval: 5s
      common_lb_config:
        healthy_panic_threshold: { value: 0 }
      load_assignment:
        cluster_name: service_backend
        policy: { overprovisioning_factor: *overprovisioning_factor }
        endpoints:
          - locality: { region: R001 }
            priority: 0
            lb_endpoints:
              - endpoint: { address: { socket_address: { address: *lbs_s_serv_1, port_value: *lbs_s_port_1 } } }
              - endpoint: { address: { socket_address: { address: *lbs_s_serv_2, port_value: *lbs_s_port_2 } } }
              - endpoint: { address: { socket_address: { address: *lbs_s_serv_3, port_value: *lbs_s_port_3 } } }
      circuit_breakers:
        thresholds:
          max_connections: 200
          max_requests: 3000
        per_host_thresholds:
          max_connections: 100
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              max_concurrent_streams: 100
          common_http_protocol_options:
            idle_timeout: 3600s
    - name: lbs_cluster_s_read
      connect_timeout: 3s
      lb_policy: LEAST_REQUEST
      health_checks:
        - timeout: 1s
          interval: *health_check_interval
          unhealthy_threshold: 3
          healthy_threshold: 2
          no_traffic_interval: *health_check_interval
          reuse_connection: true
          http_health_check:
            host: *node_id
            path: '/http.health.check/read'
          event_log_path: ${log.basedir}/health_check.log
          always_log_health_check_failures: true
      outlier_detection:
        split_external_local_origin_errors: true
        enforcing_consecutive_5xx: 0
        enforcing_consecutive_gateway_failure: 100
        enforcing_consecutive_local_origin_failure: 100
        enforcing_success_rate: 0
        enforcing_local_origin_success_rate: 0
        enforcing_failure_percentage: 0
        enforcing_failure_percentage_local_origin: 0
        consecutive_5xx: 700
        consecutive_gateway_failure: 500
        consecutive_local_origin_failure: 20
        base_ejection_time: 20s
        max_ejection_time: 40s
        max_ejection_percent: 70
        interval: 5s
      common_lb_config:
        healthy_panic_threshold: { value: 0 }
      load_assignment:
        cluster_name: service_backend
        policy: { overprovisioning_factor: *overprovisioning_factor }
        endpoints:
          - locality: { region: R001 }
            priority: 0
            lb_endpoints:
              - endpoint: { address: { socket_address: { address: *lbs_s_serv_1, port_value: *lbs_s_port_1 } } }
              - endpoint: { address: { socket_address: { address: *lbs_s_serv_2, port_value: *lbs_s_port_2 } } }
              - endpoint: { address: { socket_address: { address: *lbs_s_serv_3, port_value: *lbs_s_port_3 } } }
      circuit_breakers:
        thresholds:
          max_connections: 200
          max_requests: 3000
        per_host_thresholds:
          max_connections: 100
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              max_concurrent_streams: 100
          common_http_protocol_options:
            idle_timeout: 3600s
